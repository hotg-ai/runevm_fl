// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// \brief
  /// Check if the result contains a `usize`.
  bool rune_result_IntegerOrErrorResult_is_ok(
    ffi.Pointer<IntegerOrErrorResult> result,
  ) {
    return _rune_result_IntegerOrErrorResult_is_ok(
          result,
        ) !=
        0;
  }

  late final _rune_result_IntegerOrErrorResult_is_ok_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_IntegerOrErrorResult_is_ok>>(
          'rune_result_IntegerOrErrorResult_is_ok');
  late final _dart_rune_result_IntegerOrErrorResult_is_ok
      _rune_result_IntegerOrErrorResult_is_ok =
      _rune_result_IntegerOrErrorResult_is_ok_ptr
          .asFunction<_dart_rune_result_IntegerOrErrorResult_is_ok>();

  /// \brief
  /// Check if the result contains a `BoxedError`.
  bool rune_result_IntegerOrErrorResult_is_err(
    ffi.Pointer<IntegerOrErrorResult> result,
  ) {
    return _rune_result_IntegerOrErrorResult_is_err(
          result,
        ) !=
        0;
  }

  late final _rune_result_IntegerOrErrorResult_is_err_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_IntegerOrErrorResult_is_err>>(
          'rune_result_IntegerOrErrorResult_is_err');
  late final _dart_rune_result_IntegerOrErrorResult_is_err
      _rune_result_IntegerOrErrorResult_is_err =
      _rune_result_IntegerOrErrorResult_is_err_ptr
          .asFunction<_dart_rune_result_IntegerOrErrorResult_is_err>();

  /// \brief
  /// Free the `IntegerOrErrorResult` after you are done with it.
  void rune_result_IntegerOrErrorResult_free(
    ffi.Pointer<IntegerOrErrorResult> result,
  ) {
    return _rune_result_IntegerOrErrorResult_free(
      result,
    );
  }

  late final _rune_result_IntegerOrErrorResult_free_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_IntegerOrErrorResult_free>>(
          'rune_result_IntegerOrErrorResult_free');
  late final _dart_rune_result_IntegerOrErrorResult_free
      _rune_result_IntegerOrErrorResult_free =
      _rune_result_IntegerOrErrorResult_free_ptr
          .asFunction<_dart_rune_result_IntegerOrErrorResult_free>();

  /// \brief
  /// Get a reference to the `usize` in this `IntegerOrErrorResult`, or `null` if
  /// not present.
  ffi.Pointer<ffi.Uint64> rune_result_IntegerOrErrorResult_get_ok(
    ffi.Pointer<IntegerOrErrorResult> result,
  ) {
    return _rune_result_IntegerOrErrorResult_get_ok(
      result,
    );
  }

  late final _rune_result_IntegerOrErrorResult_get_ok_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_IntegerOrErrorResult_get_ok>>(
          'rune_result_IntegerOrErrorResult_get_ok');
  late final _dart_rune_result_IntegerOrErrorResult_get_ok
      _rune_result_IntegerOrErrorResult_get_ok =
      _rune_result_IntegerOrErrorResult_get_ok_ptr
          .asFunction<_dart_rune_result_IntegerOrErrorResult_get_ok>();

  /// \brief
  /// Get a reference to the `BoxedError` in this `IntegerOrErrorResult`, or `null`
  /// if not present.
  ffi.Pointer<ffi.Pointer<Error>> rune_result_IntegerOrErrorResult_get_err(
    ffi.Pointer<IntegerOrErrorResult> result,
  ) {
    return _rune_result_IntegerOrErrorResult_get_err(
      result,
    );
  }

  late final _rune_result_IntegerOrErrorResult_get_err_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_IntegerOrErrorResult_get_err>>(
          'rune_result_IntegerOrErrorResult_get_err');
  late final _dart_rune_result_IntegerOrErrorResult_get_err
      _rune_result_IntegerOrErrorResult_get_err =
      _rune_result_IntegerOrErrorResult_get_err_ptr
          .asFunction<_dart_rune_result_IntegerOrErrorResult_get_err>();

  /// \brief
  /// Extract the `usize`, freeing the `IntegerOrErrorResult` and crashing if it
  /// actually contains a `BoxedError`.
  int rune_result_IntegerOrErrorResult_take_ok(
    ffi.Pointer<IntegerOrErrorResult> result,
  ) {
    return _rune_result_IntegerOrErrorResult_take_ok(
      result,
    );
  }

  late final _rune_result_IntegerOrErrorResult_take_ok_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_IntegerOrErrorResult_take_ok>>(
          'rune_result_IntegerOrErrorResult_take_ok');
  late final _dart_rune_result_IntegerOrErrorResult_take_ok
      _rune_result_IntegerOrErrorResult_take_ok =
      _rune_result_IntegerOrErrorResult_take_ok_ptr
          .asFunction<_dart_rune_result_IntegerOrErrorResult_take_ok>();

  /// \brief
  /// Extract the `BoxedError`, freeing the `IntegerOrErrorResult` and crashing if
  /// it actually contains a `usize`.
  ffi.Pointer<Error> rune_result_IntegerOrErrorResult_take_err(
    ffi.Pointer<IntegerOrErrorResult> result,
  ) {
    return _rune_result_IntegerOrErrorResult_take_err(
      result,
    );
  }

  late final _rune_result_IntegerOrErrorResult_take_err_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_IntegerOrErrorResult_take_err>>(
          'rune_result_IntegerOrErrorResult_take_err');
  late final _dart_rune_result_IntegerOrErrorResult_take_err
      _rune_result_IntegerOrErrorResult_take_err =
      _rune_result_IntegerOrErrorResult_take_err_ptr
          .asFunction<_dart_rune_result_IntegerOrErrorResult_take_err>();

  /// \brief
  /// Check if the result contains a `BoxedCapability`.
  bool rune_result_CapabilityResult_is_ok(
    ffi.Pointer<CapabilityResult> result,
  ) {
    return _rune_result_CapabilityResult_is_ok(
          result,
        ) !=
        0;
  }

  late final _rune_result_CapabilityResult_is_ok_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_CapabilityResult_is_ok>>(
          'rune_result_CapabilityResult_is_ok');
  late final _dart_rune_result_CapabilityResult_is_ok
      _rune_result_CapabilityResult_is_ok =
      _rune_result_CapabilityResult_is_ok_ptr
          .asFunction<_dart_rune_result_CapabilityResult_is_ok>();

  /// \brief
  /// Check if the result contains a `BoxedError`.
  bool rune_result_CapabilityResult_is_err(
    ffi.Pointer<CapabilityResult> result,
  ) {
    return _rune_result_CapabilityResult_is_err(
          result,
        ) !=
        0;
  }

  late final _rune_result_CapabilityResult_is_err_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_CapabilityResult_is_err>>(
          'rune_result_CapabilityResult_is_err');
  late final _dart_rune_result_CapabilityResult_is_err
      _rune_result_CapabilityResult_is_err =
      _rune_result_CapabilityResult_is_err_ptr
          .asFunction<_dart_rune_result_CapabilityResult_is_err>();

  /// \brief
  /// Free the `CapabilityResult` after you are done with it.
  void rune_result_CapabilityResult_free(
    ffi.Pointer<CapabilityResult> result,
  ) {
    return _rune_result_CapabilityResult_free(
      result,
    );
  }

  late final _rune_result_CapabilityResult_free_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_CapabilityResult_free>>(
          'rune_result_CapabilityResult_free');
  late final _dart_rune_result_CapabilityResult_free
      _rune_result_CapabilityResult_free =
      _rune_result_CapabilityResult_free_ptr
          .asFunction<_dart_rune_result_CapabilityResult_free>();

  /// \brief
  /// Get a reference to the `BoxedCapability` in this `CapabilityResult`, or
  /// `null` if not present.
  ffi.Pointer<ffi.Pointer<Capability_t>> rune_result_CapabilityResult_get_ok(
    ffi.Pointer<CapabilityResult> result,
  ) {
    return _rune_result_CapabilityResult_get_ok(
      result,
    );
  }

  late final _rune_result_CapabilityResult_get_ok_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_CapabilityResult_get_ok>>(
          'rune_result_CapabilityResult_get_ok');
  late final _dart_rune_result_CapabilityResult_get_ok
      _rune_result_CapabilityResult_get_ok =
      _rune_result_CapabilityResult_get_ok_ptr
          .asFunction<_dart_rune_result_CapabilityResult_get_ok>();

  /// \brief
  /// Get a reference to the `BoxedError` in this `CapabilityResult`, or `null` if
  /// not present.
  ffi.Pointer<ffi.Pointer<Error>> rune_result_CapabilityResult_get_err(
    ffi.Pointer<CapabilityResult> result,
  ) {
    return _rune_result_CapabilityResult_get_err(
      result,
    );
  }

  late final _rune_result_CapabilityResult_get_err_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_CapabilityResult_get_err>>(
          'rune_result_CapabilityResult_get_err');
  late final _dart_rune_result_CapabilityResult_get_err
      _rune_result_CapabilityResult_get_err =
      _rune_result_CapabilityResult_get_err_ptr
          .asFunction<_dart_rune_result_CapabilityResult_get_err>();

  /// \brief
  /// Extract the `BoxedCapability`, freeing the `CapabilityResult` and crashing if
  /// it actually contains a `BoxedError`.
  ffi.Pointer<Capability_t> rune_result_CapabilityResult_take_ok(
    ffi.Pointer<CapabilityResult> result,
  ) {
    return _rune_result_CapabilityResult_take_ok(
      result,
    );
  }

  late final _rune_result_CapabilityResult_take_ok_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_CapabilityResult_take_ok>>(
          'rune_result_CapabilityResult_take_ok');
  late final _dart_rune_result_CapabilityResult_take_ok
      _rune_result_CapabilityResult_take_ok =
      _rune_result_CapabilityResult_take_ok_ptr
          .asFunction<_dart_rune_result_CapabilityResult_take_ok>();

  /// \brief
  /// Extract the `BoxedError`, freeing the `CapabilityResult` and crashing if it
  /// actually contains a `BoxedCapability`.
  ffi.Pointer<Error> rune_result_CapabilityResult_take_err(
    ffi.Pointer<CapabilityResult> result,
  ) {
    return _rune_result_CapabilityResult_take_err(
      result,
    );
  }

  late final _rune_result_CapabilityResult_take_err_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_CapabilityResult_take_err>>(
          'rune_result_CapabilityResult_take_err');
  late final _dart_rune_result_CapabilityResult_take_err
      _rune_result_CapabilityResult_take_err =
      _rune_result_CapabilityResult_take_err_ptr
          .asFunction<_dart_rune_result_CapabilityResult_take_err>();

  ffi.Pointer<RunicosBaseImage> rune_image_new() {
    return _rune_image_new();
  }

  late final _rune_image_new_ptr =
      _lookup<ffi.NativeFunction<_c_rune_image_new>>('rune_image_new');
  late final _dart_rune_image_new _rune_image_new =
      _rune_image_new_ptr.asFunction<_dart_rune_image_new>();

  void rune_image_free(
    ffi.Pointer<RunicosBaseImage> image,
  ) {
    return _rune_image_free(
      image,
    );
  }

  late final _rune_image_free_ptr =
      _lookup<ffi.NativeFunction<_c_rune_image_free>>('rune_image_free');
  late final _dart_rune_image_free _rune_image_free =
      _rune_image_free_ptr.asFunction<_dart_rune_image_free>();

  /// \brief
  /// Set the closure to be called when the Rune emits log messages.
  void rune_image_set_log(
    ffi.Pointer<RunicosBaseImage> image,
    BoxDynFnMut1_RuneResult_ptr_LogRecord_t log,
  ) {
    return _rune_image_set_log(
      image,
      log,
    );
  }

  late final _rune_image_set_log_ptr =
      _lookup<ffi.NativeFunction<_c_rune_image_set_log>>('rune_image_set_log');
  late final _dart_rune_image_set_log _rune_image_set_log =
      _rune_image_set_log_ptr.asFunction<_dart_rune_image_set_log>();

  void rune_image_set_raw(
    ffi.Pointer<RunicosBaseImage> image,
    BoxDynFnMut0_CapabilityResult_ptr_t raw,
  ) {
    return _rune_image_set_raw(
      image,
      raw,
    );
  }

  late final _rune_image_set_raw_ptr =
      _lookup<ffi.NativeFunction<_c_rune_image_set_raw>>('rune_image_set_raw');
  late final _dart_rune_image_set_raw _rune_image_set_raw =
      _rune_image_set_raw_ptr.asFunction<_dart_rune_image_set_raw>();

  ffi.Pointer<ffi.Int8> rune_log_level_name(
    int level,
  ) {
    return _rune_log_level_name(
      level,
    );
  }

  late final _rune_log_level_name_ptr =
      _lookup<ffi.NativeFunction<_c_rune_log_level_name>>(
          'rune_log_level_name');
  late final _dart_rune_log_level_name _rune_log_level_name =
      _rune_log_level_name_ptr.asFunction<_dart_rune_log_level_name>();

  /// \brief
  /// Check if the result contains a `BoxedWasmerRuntime`.
  bool rune_result_WasmerRuntimeResult_is_ok(
    ffi.Pointer<WasmerRuntimeResult> result,
  ) {
    return _rune_result_WasmerRuntimeResult_is_ok(
          result,
        ) !=
        0;
  }

  late final _rune_result_WasmerRuntimeResult_is_ok_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_WasmerRuntimeResult_is_ok>>(
          'rune_result_WasmerRuntimeResult_is_ok');
  late final _dart_rune_result_WasmerRuntimeResult_is_ok
      _rune_result_WasmerRuntimeResult_is_ok =
      _rune_result_WasmerRuntimeResult_is_ok_ptr
          .asFunction<_dart_rune_result_WasmerRuntimeResult_is_ok>();

  /// \brief
  /// Check if the result contains a `BoxedError`.
  bool rune_result_WasmerRuntimeResult_is_err(
    ffi.Pointer<WasmerRuntimeResult> result,
  ) {
    return _rune_result_WasmerRuntimeResult_is_err(
          result,
        ) !=
        0;
  }

  late final _rune_result_WasmerRuntimeResult_is_err_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_WasmerRuntimeResult_is_err>>(
          'rune_result_WasmerRuntimeResult_is_err');
  late final _dart_rune_result_WasmerRuntimeResult_is_err
      _rune_result_WasmerRuntimeResult_is_err =
      _rune_result_WasmerRuntimeResult_is_err_ptr
          .asFunction<_dart_rune_result_WasmerRuntimeResult_is_err>();

  /// \brief
  /// Free the `WasmerRuntimeResult` after you are done with it.
  void rune_result_WasmerRuntimeResult_free(
    ffi.Pointer<WasmerRuntimeResult> result,
  ) {
    return _rune_result_WasmerRuntimeResult_free(
      result,
    );
  }

  late final _rune_result_WasmerRuntimeResult_free_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_WasmerRuntimeResult_free>>(
          'rune_result_WasmerRuntimeResult_free');
  late final _dart_rune_result_WasmerRuntimeResult_free
      _rune_result_WasmerRuntimeResult_free =
      _rune_result_WasmerRuntimeResult_free_ptr
          .asFunction<_dart_rune_result_WasmerRuntimeResult_free>();

  /// \brief
  /// Get a reference to the `BoxedWasmerRuntime` in this `WasmerRuntimeResult`, or
  /// `null` if not present.
  ffi.Pointer<ffi.Pointer<WasmerRuntime>>
      rune_result_WasmerRuntimeResult_get_ok(
    ffi.Pointer<WasmerRuntimeResult> result,
  ) {
    return _rune_result_WasmerRuntimeResult_get_ok(
      result,
    );
  }

  late final _rune_result_WasmerRuntimeResult_get_ok_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_WasmerRuntimeResult_get_ok>>(
          'rune_result_WasmerRuntimeResult_get_ok');
  late final _dart_rune_result_WasmerRuntimeResult_get_ok
      _rune_result_WasmerRuntimeResult_get_ok =
      _rune_result_WasmerRuntimeResult_get_ok_ptr
          .asFunction<_dart_rune_result_WasmerRuntimeResult_get_ok>();

  /// \brief
  /// Get a reference to the `BoxedError` in this `WasmerRuntimeResult`, or `null`
  /// if not present.
  ffi.Pointer<ffi.Pointer<Error>> rune_result_WasmerRuntimeResult_get_err(
    ffi.Pointer<WasmerRuntimeResult> result,
  ) {
    return _rune_result_WasmerRuntimeResult_get_err(
      result,
    );
  }

  late final _rune_result_WasmerRuntimeResult_get_err_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_WasmerRuntimeResult_get_err>>(
          'rune_result_WasmerRuntimeResult_get_err');
  late final _dart_rune_result_WasmerRuntimeResult_get_err
      _rune_result_WasmerRuntimeResult_get_err =
      _rune_result_WasmerRuntimeResult_get_err_ptr
          .asFunction<_dart_rune_result_WasmerRuntimeResult_get_err>();

  /// \brief
  /// Extract the `BoxedWasmerRuntime`, freeing the `WasmerRuntimeResult` and
  /// crashing if it actually contains a `BoxedError`.
  ffi.Pointer<WasmerRuntime> rune_result_WasmerRuntimeResult_take_ok(
    ffi.Pointer<WasmerRuntimeResult> result,
  ) {
    return _rune_result_WasmerRuntimeResult_take_ok(
      result,
    );
  }

  late final _rune_result_WasmerRuntimeResult_take_ok_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_WasmerRuntimeResult_take_ok>>(
          'rune_result_WasmerRuntimeResult_take_ok');
  late final _dart_rune_result_WasmerRuntimeResult_take_ok
      _rune_result_WasmerRuntimeResult_take_ok =
      _rune_result_WasmerRuntimeResult_take_ok_ptr
          .asFunction<_dart_rune_result_WasmerRuntimeResult_take_ok>();

  /// \brief
  /// Extract the `BoxedError`, freeing the `WasmerRuntimeResult` and crashing if
  /// it actually contains a `BoxedWasmerRuntime`.
  ffi.Pointer<Error> rune_result_WasmerRuntimeResult_take_err(
    ffi.Pointer<WasmerRuntimeResult> result,
  ) {
    return _rune_result_WasmerRuntimeResult_take_err(
      result,
    );
  }

  late final _rune_result_WasmerRuntimeResult_take_err_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_WasmerRuntimeResult_take_err>>(
          'rune_result_WasmerRuntimeResult_take_err');
  late final _dart_rune_result_WasmerRuntimeResult_take_err
      _rune_result_WasmerRuntimeResult_take_err =
      _rune_result_WasmerRuntimeResult_take_err_ptr
          .asFunction<_dart_rune_result_WasmerRuntimeResult_take_err>();

  /// \brief
  /// Load a Rune backed by the provided image.
  ///
  /// If loading is successful, `runtime_out` will be set to a new `WasmerRuntime`
  /// instance, otherwise an error is returned.
  ffi.Pointer<WasmerRuntimeResult> rune_wasmer_runtime_load(
    slice_ref_uint8_t rune,
    ffi.Pointer<RunicosBaseImage> image,
  ) {
    return _rune_wasmer_runtime_load(
      rune,
      image,
    );
  }

  late final _rune_wasmer_runtime_load_ptr =
      _lookup<ffi.NativeFunction<_c_rune_wasmer_runtime_load>>(
          'rune_wasmer_runtime_load');
  late final _dart_rune_wasmer_runtime_load _rune_wasmer_runtime_load =
      _rune_wasmer_runtime_load_ptr
          .asFunction<_dart_rune_wasmer_runtime_load>();

  /// \brief
  /// Free a `WasmerRuntime` once you are done with it.
  void rune_wasmer_runtime_free(
    ffi.Pointer<WasmerRuntime> runtime,
  ) {
    return _rune_wasmer_runtime_free(
      runtime,
    );
  }

  late final _rune_wasmer_runtime_free_ptr =
      _lookup<ffi.NativeFunction<_c_rune_wasmer_runtime_free>>(
          'rune_wasmer_runtime_free');
  late final _dart_rune_wasmer_runtime_free _rune_wasmer_runtime_free =
      _rune_wasmer_runtime_free_ptr
          .asFunction<_dart_rune_wasmer_runtime_free>();

  /// \brief
  /// Evaluate the Rune pipeline.
  ffi.Pointer<RuneResult> rune_wasmer_runtime_call(
    ffi.Pointer<WasmerRuntime> runtime,
  ) {
    return _rune_wasmer_runtime_call(
      runtime,
    );
  }

  late final _rune_wasmer_runtime_call_ptr =
      _lookup<ffi.NativeFunction<_c_rune_wasmer_runtime_call>>(
          'rune_wasmer_runtime_call');
  late final _dart_rune_wasmer_runtime_call _rune_wasmer_runtime_call =
      _rune_wasmer_runtime_call_ptr
          .asFunction<_dart_rune_wasmer_runtime_call>();

  /// \brief
  /// Construct a new error.
  ffi.Pointer<Error> rune_error_new(
    ffi.Pointer<ffi.Int8> msg,
  ) {
    return _rune_error_new(
      msg,
    );
  }

  late final _rune_error_new_ptr =
      _lookup<ffi.NativeFunction<_c_rune_error_new>>('rune_error_new');
  late final _dart_rune_error_new _rune_error_new =
      _rune_error_new_ptr.asFunction<_dart_rune_error_new>();

  /// \brief
  /// Free the error once you are done with it.
  void rune_error_free(
    ffi.Pointer<Error> e,
  ) {
    return _rune_error_free(
      e,
    );
  }

  late final _rune_error_free_ptr =
      _lookup<ffi.NativeFunction<_c_rune_error_free>>('rune_error_free');
  late final _dart_rune_error_free _rune_error_free =
      _rune_error_free_ptr.asFunction<_dart_rune_error_free>();

  /// \brief
  /// Return a newly allocated string containing the error's backtrace.
  ffi.Pointer<ffi.Int8> rune_error_backtrace(
    ffi.Pointer<Error> error,
  ) {
    return _rune_error_backtrace(
      error,
    );
  }

  late final _rune_error_backtrace_ptr =
      _lookup<ffi.NativeFunction<_c_rune_error_backtrace>>(
          'rune_error_backtrace');
  late final _dart_rune_error_backtrace _rune_error_backtrace =
      _rune_error_backtrace_ptr.asFunction<_dart_rune_error_backtrace>();

  /// \brief
  /// Return a newly allocated string describing the error.
  ffi.Pointer<ffi.Int8> rune_error_to_string(
    ffi.Pointer<Error> error,
  ) {
    return _rune_error_to_string(
      error,
    );
  }

  late final _rune_error_to_string_ptr =
      _lookup<ffi.NativeFunction<_c_rune_error_to_string>>(
          'rune_error_to_string');
  late final _dart_rune_error_to_string _rune_error_to_string =
      _rune_error_to_string_ptr.asFunction<_dart_rune_error_to_string>();

  /// \brief
  /// Return a newly allocated string describing the error and any errors that
  /// may have caused it.
  ///
  /// This will also contain a backtrace if the `RUST_BACKTRACE` environment
  /// variable is set.
  ffi.Pointer<ffi.Int8> rune_error_to_string_verbose(
    ffi.Pointer<Error> error,
  ) {
    return _rune_error_to_string_verbose(
      error,
    );
  }

  late final _rune_error_to_string_verbose_ptr =
      _lookup<ffi.NativeFunction<_c_rune_error_to_string_verbose>>(
          'rune_error_to_string_verbose');
  late final _dart_rune_error_to_string_verbose _rune_error_to_string_verbose =
      _rune_error_to_string_verbose_ptr
          .asFunction<_dart_rune_error_to_string_verbose>();

  /// \brief
  /// Check if the result contains a `u8`.
  bool rune_result_RuneResult_is_ok(
    ffi.Pointer<RuneResult> result,
  ) {
    return _rune_result_RuneResult_is_ok(
          result,
        ) !=
        0;
  }

  late final _rune_result_RuneResult_is_ok_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_RuneResult_is_ok>>(
          'rune_result_RuneResult_is_ok');
  late final _dart_rune_result_RuneResult_is_ok _rune_result_RuneResult_is_ok =
      _rune_result_RuneResult_is_ok_ptr
          .asFunction<_dart_rune_result_RuneResult_is_ok>();

  /// \brief
  /// Check if the result contains a `BoxedError`.
  bool rune_result_RuneResult_is_err(
    ffi.Pointer<RuneResult> result,
  ) {
    return _rune_result_RuneResult_is_err(
          result,
        ) !=
        0;
  }

  late final _rune_result_RuneResult_is_err_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_RuneResult_is_err>>(
          'rune_result_RuneResult_is_err');
  late final _dart_rune_result_RuneResult_is_err
      _rune_result_RuneResult_is_err = _rune_result_RuneResult_is_err_ptr
          .asFunction<_dart_rune_result_RuneResult_is_err>();

  /// \brief
  /// Free the `RuneResult` after you are done with it.
  void rune_result_RuneResult_free(
    ffi.Pointer<RuneResult> result,
  ) {
    return _rune_result_RuneResult_free(
      result,
    );
  }

  late final _rune_result_RuneResult_free_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_RuneResult_free>>(
          'rune_result_RuneResult_free');
  late final _dart_rune_result_RuneResult_free _rune_result_RuneResult_free =
      _rune_result_RuneResult_free_ptr
          .asFunction<_dart_rune_result_RuneResult_free>();

  /// \brief
  /// Get a reference to the `u8` in this `RuneResult`, or `null` if not present.
  ffi.Pointer<ffi.Uint8> rune_result_RuneResult_get_ok(
    ffi.Pointer<RuneResult> result,
  ) {
    return _rune_result_RuneResult_get_ok(
      result,
    );
  }

  late final _rune_result_RuneResult_get_ok_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_RuneResult_get_ok>>(
          'rune_result_RuneResult_get_ok');
  late final _dart_rune_result_RuneResult_get_ok
      _rune_result_RuneResult_get_ok = _rune_result_RuneResult_get_ok_ptr
          .asFunction<_dart_rune_result_RuneResult_get_ok>();

  /// \brief
  /// Get a reference to the `BoxedError` in this `RuneResult`, or `null` if not
  /// present.
  ffi.Pointer<ffi.Pointer<Error>> rune_result_RuneResult_get_err(
    ffi.Pointer<RuneResult> result,
  ) {
    return _rune_result_RuneResult_get_err(
      result,
    );
  }

  late final _rune_result_RuneResult_get_err_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_RuneResult_get_err>>(
          'rune_result_RuneResult_get_err');
  late final _dart_rune_result_RuneResult_get_err
      _rune_result_RuneResult_get_err = _rune_result_RuneResult_get_err_ptr
          .asFunction<_dart_rune_result_RuneResult_get_err>();

  /// \brief
  /// Extract the `u8`, freeing the `RuneResult` and crashing if it actually
  /// contains a `BoxedError`.
  int rune_result_RuneResult_take_ok(
    ffi.Pointer<RuneResult> result,
  ) {
    return _rune_result_RuneResult_take_ok(
      result,
    );
  }

  late final _rune_result_RuneResult_take_ok_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_RuneResult_take_ok>>(
          'rune_result_RuneResult_take_ok');
  late final _dart_rune_result_RuneResult_take_ok
      _rune_result_RuneResult_take_ok = _rune_result_RuneResult_take_ok_ptr
          .asFunction<_dart_rune_result_RuneResult_take_ok>();

  /// \brief
  /// Extract the `BoxedError`, freeing the `RuneResult` and crashing if it
  /// actually contains a `u8`.
  ffi.Pointer<Error> rune_result_RuneResult_take_err(
    ffi.Pointer<RuneResult> result,
  ) {
    return _rune_result_RuneResult_take_err(
      result,
    );
  }

  late final _rune_result_RuneResult_take_err_ptr =
      _lookup<ffi.NativeFunction<_c_rune_result_RuneResult_take_err>>(
          'rune_result_RuneResult_take_err');
  late final _dart_rune_result_RuneResult_take_err
      _rune_result_RuneResult_take_err = _rune_result_RuneResult_take_err_ptr
          .asFunction<_dart_rune_result_RuneResult_take_err>();
}

class IntegerOrErrorResult extends ffi.Opaque {}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Int8> __opaque;
}

class Error extends ffi.Opaque {}

class CapabilityResult extends ffi.Opaque {}

/// \brief
/// Like [`slice_ref`] and [`slice_mut`], but with any lifetime attached
/// whatsoever.
///
/// It is only intended to be used as the parameter of a **callback** that
/// locally borrows it, due to limitations of the [`ReprC`][
/// `trait@crate::layout::ReprC`] design _w.r.t._ higher-rank trait bounds.
///
/// # C layout (for some given type T)
///
/// ```c
/// typedef struct {
/// // Cannot be NULL
/// T * ptr;
/// size_t len;
/// } slice_T;
/// ```
///
/// # Nullable pointer?
///
/// If you want to support the above typedef, but where the `ptr` field is
/// allowed to be `NULL` (with the contents of `len` then being undefined)
/// use the `Option< slice_ptr<_> >` type.
class slice_raw_uint8_t extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Uint64()
  external int len;
}

class Capability_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> user_data;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_2>> set_parameter;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_3>> generate;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_4>> free;
}

class RunicosBaseImage extends ffi.Opaque {}

class RuneResult extends ffi.Opaque {}

class LogRecord_t extends ffi.Struct {
  @ffi.Uint32()
  external int level;

  external slice_raw_uint8_t target;

  external ffi.Pointer<ffi.Int8> message;
}

class BoxDynFnMut1_RuneResult_ptr_LogRecord_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> env_ptr;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_5>> call;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_6>> free;
}

class BoxDynFnMut0_CapabilityResult_ptr_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> env_ptr;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_7>> call;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_8>> free;
}

class WasmerRuntimeResult extends ffi.Opaque {}

class WasmerRuntime extends ffi.Opaque {}

/// \brief
/// `&'lt [T]` but with a guaranteed `#[repr(C)]` layout.
///
/// # C layout (for some given type T)
///
/// ```c
/// typedef struct {
/// // Cannot be NULL
/// T * ptr;
/// size_t len;
/// } slice_T;
/// ```
///
/// # Nullable pointer?
///
/// If you want to support the above typedef, but where the `ptr` field is
/// allowed to be `NULL` (with the contents of `len` then being undefined)
/// use the `Option< slice_ptr<_> >` type.
class slice_ref_uint8_t extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Uint64()
  external int len;
}

const int LOG_LEVEL_ERROR = 1;

const int LOG_LEVEL_WARN = 2;

const int LOG_LEVEL_INFO = 3;

const int LOG_LEVEL_DEBUG = 4;

const int LOG_LEVEL_TRACE = 5;

const int true_1 = 1;

const int false_1 = 0;

const int __bool_true_false_are_defined = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

typedef _c_rune_result_IntegerOrErrorResult_is_ok = ffi.Uint8 Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _dart_rune_result_IntegerOrErrorResult_is_ok = int Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _c_rune_result_IntegerOrErrorResult_is_err = ffi.Uint8 Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _dart_rune_result_IntegerOrErrorResult_is_err = int Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _c_rune_result_IntegerOrErrorResult_free = ffi.Void Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _dart_rune_result_IntegerOrErrorResult_free = void Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _c_rune_result_IntegerOrErrorResult_get_ok = ffi.Pointer<ffi.Uint64>
    Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _dart_rune_result_IntegerOrErrorResult_get_ok = ffi.Pointer<ffi.Uint64>
    Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _c_rune_result_IntegerOrErrorResult_get_err
    = ffi.Pointer<ffi.Pointer<Error>> Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _dart_rune_result_IntegerOrErrorResult_get_err
    = ffi.Pointer<ffi.Pointer<Error>> Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _c_rune_result_IntegerOrErrorResult_take_ok = ffi.Uint64 Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _dart_rune_result_IntegerOrErrorResult_take_ok = int Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _c_rune_result_IntegerOrErrorResult_take_err = ffi.Pointer<Error>
    Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _dart_rune_result_IntegerOrErrorResult_take_err = ffi.Pointer<Error>
    Function(
  ffi.Pointer<IntegerOrErrorResult> result,
);

typedef _c_rune_result_CapabilityResult_is_ok = ffi.Uint8 Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _dart_rune_result_CapabilityResult_is_ok = int Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _c_rune_result_CapabilityResult_is_err = ffi.Uint8 Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _dart_rune_result_CapabilityResult_is_err = int Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _c_rune_result_CapabilityResult_free = ffi.Void Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _dart_rune_result_CapabilityResult_free = void Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _c_rune_result_CapabilityResult_get_ok
    = ffi.Pointer<ffi.Pointer<Capability_t>> Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _dart_rune_result_CapabilityResult_get_ok
    = ffi.Pointer<ffi.Pointer<Capability_t>> Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _c_rune_result_CapabilityResult_get_err
    = ffi.Pointer<ffi.Pointer<Error>> Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _dart_rune_result_CapabilityResult_get_err
    = ffi.Pointer<ffi.Pointer<Error>> Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _c_rune_result_CapabilityResult_take_ok = ffi.Pointer<Capability_t>
    Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _dart_rune_result_CapabilityResult_take_ok = ffi.Pointer<Capability_t>
    Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _c_rune_result_CapabilityResult_take_err = ffi.Pointer<Error> Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _dart_rune_result_CapabilityResult_take_err = ffi.Pointer<Error>
    Function(
  ffi.Pointer<CapabilityResult> result,
);

typedef _c_rune_image_new = ffi.Pointer<RunicosBaseImage> Function();

typedef _dart_rune_image_new = ffi.Pointer<RunicosBaseImage> Function();

typedef _c_rune_image_free = ffi.Void Function(
  ffi.Pointer<RunicosBaseImage> image,
);

typedef _dart_rune_image_free = void Function(
  ffi.Pointer<RunicosBaseImage> image,
);

typedef _c_rune_image_set_log = ffi.Void Function(
  ffi.Pointer<RunicosBaseImage> image,
  BoxDynFnMut1_RuneResult_ptr_LogRecord_t log,
);

typedef _dart_rune_image_set_log = void Function(
  ffi.Pointer<RunicosBaseImage> image,
  BoxDynFnMut1_RuneResult_ptr_LogRecord_t log,
);

typedef _c_rune_image_set_raw = ffi.Void Function(
  ffi.Pointer<RunicosBaseImage> image,
  BoxDynFnMut0_CapabilityResult_ptr_t raw,
);

typedef _dart_rune_image_set_raw = void Function(
  ffi.Pointer<RunicosBaseImage> image,
  BoxDynFnMut0_CapabilityResult_ptr_t raw,
);

typedef _c_rune_log_level_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 level,
);

typedef _dart_rune_log_level_name = ffi.Pointer<ffi.Int8> Function(
  int level,
);

typedef _c_rune_result_WasmerRuntimeResult_is_ok = ffi.Uint8 Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _dart_rune_result_WasmerRuntimeResult_is_ok = int Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _c_rune_result_WasmerRuntimeResult_is_err = ffi.Uint8 Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _dart_rune_result_WasmerRuntimeResult_is_err = int Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _c_rune_result_WasmerRuntimeResult_free = ffi.Void Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _dart_rune_result_WasmerRuntimeResult_free = void Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _c_rune_result_WasmerRuntimeResult_get_ok
    = ffi.Pointer<ffi.Pointer<WasmerRuntime>> Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _dart_rune_result_WasmerRuntimeResult_get_ok
    = ffi.Pointer<ffi.Pointer<WasmerRuntime>> Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _c_rune_result_WasmerRuntimeResult_get_err
    = ffi.Pointer<ffi.Pointer<Error>> Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _dart_rune_result_WasmerRuntimeResult_get_err
    = ffi.Pointer<ffi.Pointer<Error>> Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _c_rune_result_WasmerRuntimeResult_take_ok = ffi.Pointer<WasmerRuntime>
    Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _dart_rune_result_WasmerRuntimeResult_take_ok
    = ffi.Pointer<WasmerRuntime> Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _c_rune_result_WasmerRuntimeResult_take_err = ffi.Pointer<Error>
    Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _dart_rune_result_WasmerRuntimeResult_take_err = ffi.Pointer<Error>
    Function(
  ffi.Pointer<WasmerRuntimeResult> result,
);

typedef _c_rune_wasmer_runtime_load = ffi.Pointer<WasmerRuntimeResult> Function(
  slice_ref_uint8_t rune,
  ffi.Pointer<RunicosBaseImage> image,
);

typedef _dart_rune_wasmer_runtime_load = ffi.Pointer<WasmerRuntimeResult>
    Function(
  slice_ref_uint8_t rune,
  ffi.Pointer<RunicosBaseImage> image,
);

typedef _c_rune_wasmer_runtime_free = ffi.Void Function(
  ffi.Pointer<WasmerRuntime> runtime,
);

typedef _dart_rune_wasmer_runtime_free = void Function(
  ffi.Pointer<WasmerRuntime> runtime,
);

typedef _c_rune_wasmer_runtime_call = ffi.Pointer<RuneResult> Function(
  ffi.Pointer<WasmerRuntime> runtime,
);

typedef _dart_rune_wasmer_runtime_call = ffi.Pointer<RuneResult> Function(
  ffi.Pointer<WasmerRuntime> runtime,
);

typedef _c_rune_error_new = ffi.Pointer<Error> Function(
  ffi.Pointer<ffi.Int8> msg,
);

typedef _dart_rune_error_new = ffi.Pointer<Error> Function(
  ffi.Pointer<ffi.Int8> msg,
);

typedef _c_rune_error_free = ffi.Void Function(
  ffi.Pointer<Error> e,
);

typedef _dart_rune_error_free = void Function(
  ffi.Pointer<Error> e,
);

typedef _c_rune_error_backtrace = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Error> error,
);

typedef _dart_rune_error_backtrace = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Error> error,
);

typedef _c_rune_error_to_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Error> error,
);

typedef _dart_rune_error_to_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Error> error,
);

typedef _c_rune_error_to_string_verbose = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Error> error,
);

typedef _dart_rune_error_to_string_verbose = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Error> error,
);

typedef _c_rune_result_RuneResult_is_ok = ffi.Uint8 Function(
  ffi.Pointer<RuneResult> result,
);

typedef _dart_rune_result_RuneResult_is_ok = int Function(
  ffi.Pointer<RuneResult> result,
);

typedef _c_rune_result_RuneResult_is_err = ffi.Uint8 Function(
  ffi.Pointer<RuneResult> result,
);

typedef _dart_rune_result_RuneResult_is_err = int Function(
  ffi.Pointer<RuneResult> result,
);

typedef _c_rune_result_RuneResult_free = ffi.Void Function(
  ffi.Pointer<RuneResult> result,
);

typedef _dart_rune_result_RuneResult_free = void Function(
  ffi.Pointer<RuneResult> result,
);

typedef _c_rune_result_RuneResult_get_ok = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<RuneResult> result,
);

typedef _dart_rune_result_RuneResult_get_ok = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<RuneResult> result,
);

typedef _c_rune_result_RuneResult_get_err = ffi.Pointer<ffi.Pointer<Error>>
    Function(
  ffi.Pointer<RuneResult> result,
);

typedef _dart_rune_result_RuneResult_get_err = ffi.Pointer<ffi.Pointer<Error>>
    Function(
  ffi.Pointer<RuneResult> result,
);

typedef _c_rune_result_RuneResult_take_ok = ffi.Uint8 Function(
  ffi.Pointer<RuneResult> result,
);

typedef _dart_rune_result_RuneResult_take_ok = int Function(
  ffi.Pointer<RuneResult> result,
);

typedef _c_rune_result_RuneResult_take_err = ffi.Pointer<Error> Function(
  ffi.Pointer<RuneResult> result,
);

typedef _dart_rune_result_RuneResult_take_err = ffi.Pointer<Error> Function(
  ffi.Pointer<RuneResult> result,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_2 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_3 = IntegerOrErrorResult Function(
  ffi.Pointer<ffi.Void>,
  slice_raw_uint8_t,
);

typedef _typedefC_4 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_5 = ffi.Pointer<RuneResult> Function(
  ffi.Pointer<ffi.Void>,
  LogRecord_t,
);

typedef _typedefC_6 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_7 = ffi.Pointer<CapabilityResult> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_8 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
